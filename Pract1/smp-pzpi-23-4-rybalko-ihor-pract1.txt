Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії

ЗВІТ
з практичної роботи № 1
з дисципліни «Скриптові мови програмування»

Виконав
ст. гр. ПЗПІ-23-4
Рибалко Ігор

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025

ПРОГРАМУВАННЯ НА МОВІ BASH
1.1 Мета роботи: розробити скрипт, що реалізує вивід ялинки на мові BASH відповідно до завдання на платформі DL [https://dl.nure.ua/mod/page/view.php?id=664855]. Закріпити основні правила оформлення коду на BASH.
1.2. Хід роботи
Ознайомившись зі завданням на DL, а також інформацією на vps-сервері щодо завдання за допомогою команди pzpi23-task1_example –info, було зроблено такі кроки:
По-перше, повинно бути як мінімум 2 параметра скрипта: висота ялинки та шар снігу на ньому. Тому далі наведено програмну реалізацію за допомогою конструкції if ... then ... fi, яка перевіряє наявність 2 параметрів одночасно, поки умова не виконається, то буде відповідне повідомлення «Для створення ялинки треба одночасно як висота дерева, так і шар снігу на ньому!»
  6 if (( $# != 2 )); then
  7         echo "Для створення ялинки треба одночасно як висота дерева, так і шар снігу на ньому!" >&2
  8         exit 1
  9 fi
         По-друге, висота та шар снігу не можуть бути від’ємними або 0, а також під час тестування мною програми-зразка на vps-сервері, було з’ясовано, що мінімальна ялинка має параметри: 8 – висота ялинки та 7 – ширина снігу, тому це також було враховано під час розробки скрипта. Програмна реалізація надається далі.
 11 if [ "$HEIGHT_OF_TREE" -le 0 ] || [ "$WIDTH_OF_SNOW" -le 0 ]; then
 12         echo "Висота дерева та шар снігу повинні бути більші за 0!" >&2
 13         exit 2
 14 fi
 15
 16 if [ "$HEIGHT_OF_TREE" -lt 8 ] || [ "$WIDTH_OF_SNOW" -lt 7 ]; then
 17         echo "ПОМИЛКА! Неможливо побудувати ялинку!" >&2
 18         exit 3
 19 fi
          Для побудови рівнобедрених трикутників, параметри висоти та ширини повинні бути досить близькими, щоб все побудувалось рівно та згідно з завдання, але якщо буде введено висоту ялинки 100 та ширину снігу 20, то вже не буде зображено правильні рівнобедрені трикутники, тому такий випадок треба врахувати. Тобто різниця висоти та ширини повинна бути 0, 1 або 2. Але тут також проблеми: висота ялинки - 9, ширина снігу - 9, то відбудеться округлення висоти до 8 для правильної побудови, але в такому випадку висота буде менша за ширину, що порушує цілісність побудови ялинки; висота ялинки - 18, ширина снігу – 16, то відбудеться округлення ширини до 15, але в такому випадку також відбудеться порушення цілісності побудови ялинки, тому враховуємо ці випадки за допомогою конструкції if ... then ... fi. (див. дод. А (21-41)).
Тепер, коли обмеження параметрів прописані, перейдімо до написання логіки відображення ялинки. Напишемо функцію show_pine_tree(), яка міститиме 3 локальних змінних: кількість пробілів, кількість символів та тип символу: зірочка (*) чи решітка (#), а також міститиме два цикли: while ... do ... done, що потрібний для відображення пробілів, щоб була відцентрованість ялинки та цикл for ((...)); do ... done для відображення символів. Код функції надається (див. дод. А (44-61)).
Наступний крок – з’ясування межі ярусу ялинки. Для цього створимо два параметра: висота першого трикутника, тобто першого ярусу ялинки та максимальну ширину снігу на ялинці, а також створимо змінну початкового символу ялинки, за умова завдання це зірочка (*).
 63 HEIGHT_OF_FIRST_TRIANGLE=$(((HEIGHT_OF_TREE - 2) / 2))
 64 MAX_SNOW_OF_FIRST_TRIANGLE=$((WIDTH_OF_SNOW - 2))
 65
 66 CURRENT_SYMBOL="*"
Далі описуємо логіку створення рівнобедрених трикутників за допомогою циклів for ((...)); do ... done, де обраховується кількість символів та пробілів, а також тип символу – зірочка, решітка для кожної половини ялинки зі збільшенням кожного рядка на 2 символи більше, а також заміною символів на протилежний зірочка на решітку, і навпаки з кожним новим рядком. Реалізація коду (див. дод. А (68-99)).
Далі малюємо стовбур ялинки за умовою завдання, він повинен займати 2 рядка по 3 символи(#) на рядок за допомогою функції for ... in .. do ... done.
101 for i in {1..2}; do
102         spaces=$(( (WIDTH_OF_SNOW - 3) / 2 ))
103         show_pine_tree $spaces 3 "#"
104 done

Наостанок, треба зобразити шар снігу на землі, тому використаємо цикл until ... do ... done, але з уточненням, що якщо парне значення шару снігу, то округлимо до найменшого непарного, якщо ж непарне, то залишимо як є.

106 j=0
107
108 if [ $((WIDTH_OF_SNOW % 2)) -eq 0 ]; then
109         WIDTH_OF_SNOW=$((WIDTH_OF_SNOW - 1))
110 fi
111
112 until [ $j -ge $WIDTH_OF_SNOW ]; do
113         echo -n "*"
114         ((j++))
115 done
116 echo
На цьому розробка скрипту для побудови ялинки завершена, код додається у додатку А.
Висновки: Під час практичної роботи з дисципліни «Скриптові мови програмування» було розроблено скрипт для побудови ялинки в консолі на скриптовій мові Bash. На практиці було опрацьовані конструкції if ... then ... fi, while ... do ... done, until ... do ... done, for ... in .. do ... done, for ((...)); do ... done, а також реалізовано коректне відпрацювання функції, що зазначалося у завданні до практичного заняття.
 
 
ДОДАТОК А
Скрипт для створення ялинки на скриптовій мові програмування Bash
GitHub репозиторій: https://github.com/NureRybalkoIhor/smp-pzpi-23-4-rybalko-ihor/blob/main/Pract1/smp-pzpi-23-4-rybalko-ihor-pract1/smp-pzpi-23-4-rybalko-ihor-pract1-code
  1 #!/bin/bash
  2
  3 HEIGHT_OF_TREE=$1
  4 WIDTH_OF_SNOW=$2
  5
  6 if (( $# != 2 )); then
  7         echo "Для створення ялинки треба одночасно як висота дерева, так і шар снігу на ньому!" >&2
  8         exit 1
  9 fi
 10
 11 if [ "$HEIGHT_OF_TREE" -le 0 ] || [ "$WIDTH_OF_SNOW" -le 0 ]; then
 12         echo "Висота дерева та шар снігу повинні бути більші за 0!" >&2
 13         exit 2
 14 fi
 15
 16 if [ "$HEIGHT_OF_TREE" -lt 8 ] || [ "$WIDTH_OF_SNOW" -lt 7 ]; then
 17         echo "ПОМИЛКА! Неможливо побудувати ялинку!" >&2
 18         exit 3
 19 fi
 20
 21 DIFFERENCE=$((HEIGHT_OF_TREE - WIDTH_OF_SNOW))
 22
 23 if [ "$DIFFERENCE" -ne 0 ] && [ "$DIFFERENCE" -ne 1 ] && [ "$DIFFERENCE" -ne 2 ]; then
 24         echo "ПОМИЛКА! Неможливо побудувати ялинку!" >&2
 25         exit 4
 26 fi
 27
 28 if [ $((HEIGHT_OF_TREE % 2)) -ne 0 ] && [ $((WIDTH_OF_SNOW % 2)) -ne 0 ]; then
 29         if [ "$DIFFERENCE" -eq 0 ]; then
 30                     echo "ПОМИЛКА! Неможливо побудувати ялинку!" >&2
 31                     exit 5
 32         fi
 33 fi
 34
 35
 36 if [ $((HEIGHT_OF_TREE % 2)) -eq 0 ] && [ $((WIDTH_OF_SNOW % 2)) -eq 0 ]; then
 37         if [ $((HEIGHT_OF_TREE - WIDTH_OF_SNOW)) -eq 2 ]; then
 38                     echo  "ПОМИЛКА! Неможливо побудувати ялинку!" >&2
 39                     exit 6
 40         fi
 41 fi
 42
 43
 44 function show_pine_tree(){
 45         local spaces=$1
 46         local chars=$2
 47         local symbol=$3
 48
 49         i=0
 50         while [ $i -lt $spaces ]; do
 51         echo -n " "
 52         ((i++))
 53         done
 54
 55         j=0
 56         while [ $j -lt $chars ]; do
 57         echo -n "$symbol"
 58         ((j++))
 59         done
 60         echo
 61 }
 62
 63 HEIGHT_OF_FIRST_TRIANGLE=$(((HEIGHT_OF_TREE - 2) / 2))
 64 MAX_SNOW_OF_FIRST_TRIANGLE=$((WIDTH_OF_SNOW - 2))
 65
 66 CURRENT_SYMBOL="*"
 67
 68 for ((chars = 1; chars <= MAX_SNOW_OF_FIRST_TRIANGLE; chars+=2)); do
 69     spaces=$(( (WIDTH_OF_SNOW - chars) / 2 ))
 70
 71     show_pine_tree $spaces $chars "$CURRENT_SYMBOL"
 72
 73     if [ "$CURRENT_SYMBOL" == "*" ]; then
 74         CURRENT_SYMBOL="#"
 75     else
 76         CURRENT_SYMBOL="*"
 77     fi
 78 done
 79
 80 if [ "$CURRENT_SYMBOL" == "*" ]; then
 81     CURRENT_SYMBOL="#"
 82 else
 83     CURRENT_SYMBOL="*"
 84 fi
 85
 86
 87 #Друга половина
 88 for ((chars = 3; chars <= MAX_SNOW_OF_FIRST_TRIANGLE; chars+=2)); do
 89     spaces=$(( (WIDTH_OF_SNOW - chars) / 2 ))
 90
 91     if [ "$CURRENT_SYMBOL" == "*" ]; then
 92         CURRENT_SYMBOL="#"
 93     else
 94         CURRENT_SYMBOL="*"
 95     fi
 96
 97     show_pine_tree $spaces $chars "$CURRENT_SYMBOL"
 98
 99 done
100
101 for i in {1..2}; do
102         spaces=$(( (WIDTH_OF_SNOW - 3) / 2 ))
103         show_pine_tree $spaces 3 "#"
104 done
105
106 j=0
107
108 if [ $((WIDTH_OF_SNOW % 2)) -eq 0 ]; then
109         WIDTH_OF_SNOW=$((WIDTH_OF_SNOW - 1))
110 fi
111
112 until [ $j -ge $WIDTH_OF_SNOW ]; do
113         echo -n "*"
114         ((j++))
115 done
116 echo
