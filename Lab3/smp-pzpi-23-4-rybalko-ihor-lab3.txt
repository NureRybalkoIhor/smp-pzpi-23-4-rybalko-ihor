Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії

ЗВІТ
з лабораторної роботи № 3
з дисципліни «Скриптові мови програмування»
на тему: «Принципи роботи PHP. Основні синтаксичні конструкції. Дані, їх типи та робота з ними»

Виконав
ст. гр. ПЗПІ-23-4
Рибалко Ігор

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025

1 ІСТОРІЯ ЗМІН
№     Дата     Версія звіту   Опис змін та виправлень
1   27.05.25       0.1        Створено розділи «Історія змін», «Завдання», «Опис виконаної роботи», «Висновки»
2   01.06.25       0.2        Редагування розділів «Опис виконаної роботи», «Висновки» та створення розділів «Додаток А», «Додаток Б» та «Додаток В»

2 ЗАВДАННЯ
Під час лабораторної роботи потрібно створити робочий сайт з інтернет-магазином «Весна». Сайт повинен мати головну сторінку, сторінку товарів та сторінку «Кошик». Також кожна сторінка має складатися з таких частин: «шапка» сторінки (header), тіло сторінки, «підвал» сторінки (footer).
На сторінці товарів необхідно відобразити список доступних для покупки найменувань з можливістю вибрати кількість одиниць товарів і кнопкою «купити». Під час натискання на кнопку «купити», має відправлятися запит (відправка форми, методом POST) на сервер, де дані зберігаються в сесію. На сторінці «Кошик» необхідно відобразити список обраних користувачем товарів (які були збережені у сесію). Якщо ви ще не обрали жодного товару, то має бути відображений напис «Перейти до покупок» (посилання). 
3 ОПИС ВИКОНАНОЇ РОБОТИ
Розпочнемо зі створення компонентів сторінки: «шапки» та «підвалу» сторінок. На рисунку Б.1 ми можемо бачити, що є контекстна смужка, де зліва знаходиться Home (головна сторінка), посередині - Products (сторінка продуктів) та справа - Cart (сторінка «Кошик»). Їхня програмна реалізація продемонстрована за додатком В.1. Далі, на рисунку Б.2 ми також можемо бачити контекстну смужку, яка містить всі ті назви, що й «шапка», але додалося розділ «About us» («Про нас»), програмна реалізація вказана у додатку В.2. Також продемонструємо код index.php (головна сторінка). Виводить «шапку» та «підвал» сторінки та посередині назву й опис магазину.
  1 <?php include 'components/header.php'; ?>
  2
  3 <div style="text-align: center; margin: 40px; font-family: Arial, sans-serif;">
  4     <h1>Продовольчий магазин "Весна"</h1>
  5     <p>Все буде УКРАЇНА!</p>
  6 </div>
  7
  8 <?php include 'components/footer.php'; ?>
Наступним чином розглянемо реалізацію сторінки товарів (products.php) та паралельно файл db_config.php, що відповідає за ініціалізацію БД продуктів.
Зараз ми розглядаємо файл db_config.php (див. В.3), де основне завдання - це створити (за потреби) локальну базу даних shop.db, налаштувати з'єднання до неї, створити таблицю для збереження товарів, а також заповнити її базовими продуктами, якщо вона ще порожня. На початку коду ми бачимо виклик session_start(); - цей рядок активує сесію в PHP, що дозволяє зберігати інформацію між запитами, наприклад: вміст кошика, дані користувача чи обрані товари. Хоч це й не стосується безпосередньо бази даних, session_start() є важливою частиною загальної логіки застосунку.
Далі визначено функцію getDBConnection(). Вона створює з'єднання з базою даних SQLite, яка зберігається у файлі shop.db. Якщо файл ще не існує, SQLite автоматично створить його при першому з’єднанні. У функції ми також задаємо режим помилок PDO::ERRMODE_EXCEPTION, щоб у разі помилок одразу отримувати винятки, що спрощує налагодження. Після цього визначено функцію createProductsTable(), яка створює таблицю products, якщо вона ще не існує. Після створення таблиці викликається функція initializeProducts(), яка виконує роль початкового заповнення бази даних товарами. Вона підключається до бази даних і перевіряє, чи таблиця вже містить якісь товари, використовуючи SELECT COUNT(*). Якщо таблиця порожня, то в неї додаються стандартні товари - молоко, хліб, сир, сметана, кефір, газована вода та печиво. Для кожного з них вказано код, назву, ціну та зображення. Додавання до бази відбувається за допомогою підготовленого SQL-запиту, що гарантує безпечне передавання даних. Також, файл містить дві допоміжні функції: getAllProducts() - повертає повний список товарів, впорядкований за назвою; getProductByCode($code) - повертає дані про один товар за його кодом.
Насамкінець, в самому низу файлу викликаються createProductsTable() та initializeProducts(), що гарантує: при першому запуску базу буде створено, а дані - заповнено автоматично. Таким чином, цей файл дозволяє легко розгорнути всю структуру бази даних без додаткових дій з боку користувача або адміністратора.
Далі розглядаємо файл products.php (див. В.4), візуальна візуалізація (див. Б.3), який відповідає за відображення всіх доступних товарів і формування замовлення. Він відкривається з підключення до конфігурації бази даних за допомогою require_once '../db_config.php'; Цей рядок дає змогу використовувати функції доступу до бази даних, зокрема getAllProducts(), яка витягує перелік усіх товарів, що доступні для замовлення. 
Після цього ініціалізується масив $errors, у ньому зберігатимуться повідомлення про помилки введення (наприклад, якщо користувач введе від’ємну кількість). Також створюється змінна $submitted, яка зчитує дані з форми, якщо користувач уже надсилав запит.
Далі викликається функція getAllProducts(), яка повертає список усіх товарів, що відображаються у вигляді таблиці. Одночасно з цим отримується поточний вміст кошика зі сесії: $currentCart = $_SESSION['cart'] ?? [];. Потрібно для того, щоб якщо користувач уже щось обрав - ми могли попередньо заповнити значення в полі "кількість", коли він знову відкриє сторінку.
Далі перевіряється, чи запит був надісланий методом POST. Якщо так - починається обробка форми. Перебираються всі товари, і для кожного з них зчитується вказана кількість: $qty = isset($_POST[$code]) ? (int)$_POST[$code] : 0; Якщо значення менше нуля, додається помилка. Якщо ж воно більше нуля - цей товар заноситься до масиву $validItems, який потім і буде записаний у кошик: $_SESSION['cart'] = $validItems; 
Також зберігається останній стан форми у сесії: $_SESSION['last_form_data'] = $_POST; - це дозволяє при повторному відкритті сторінки заповнювати форму останніми введеними користувачем значеннями. У випадку успішного додавання товарів, користувача перенаправляють на сторінку кошика (basket.php).
Якщо ж кошик порожній, останні дані форми очищаються, щоби не вводити користувача в оману старими значеннями: unset($_SESSION['last_form_data']); 
Далі підключається заголовок сторінки за допомогою: include $root_path . 'components/header.php'; а також форму з таблицею. У кожному рядку таблиці виводиться назва товару, його зображення, ціна та поле для введення кількості.
<input type="number" name="<?= htmlspecialchars($product['code']) ?>" min="0" value="..."> => Значення або береться з останніх введених користувачем даних, або встановлюється на 0, якщо нічого не було обрано. Таким чином, сторінка динамічно реагує на дії користувача. 
Наприкінці йде кнопка надсилання форми - вона оформлена стилізовано, і натискання на неї фактично додає вибрані товари до кошика. Після основного вмісту сторінки підключається футер: include $root_path . 'components/footer.php'; 
І також важливий момент - очищення збережених у сесії даних форми: unset($_SESSION['last_form_data']); Це необхідно, щоби при кожному новому завантаженні сторінки користувач бачив актуальну інформацію, а не старі залишки введень.
Наступне, ми розглянемо basket.php (див. В.5), візуальна візуалізація (див. Б.4).  На початку файлу обов’язково підключається конфігурація проєкту через require_once '../db_config.php';, оскільки саме там знаходяться важливі функції, зокрема для отримання інформації про товари з бази даних. Далі з сесії витягується поточний вміст кошика - якщо його ще не існує, створюється порожній масив. Ініціалізується змінна $total, яка пізніше буде використовуватись для підрахунку загальної вартості всіх товарів. Після цього підключається заголовок сторінки з окремого компоненту header.php, шлях до якого вказано через змінну $root_path.
Наступна частина - це обробка дій, які може виконати користувач у кошику. Перша з них - видалення конкретного товару. Якщо в адресному рядку є параметр remove, скрипт перевіряє, чи існує товар з таким кодом у кошику, і якщо так - видаляє його. Крім того, очищаються і збережені раніше значення форми (якщо такі були). Після видалення відбувається перезавантаження сторінки, щоб оновити вміст кошика.
Інша дія - повне очищення кошика. Якщо в URL є параметр clear, сесійна змінна кошика обнуляється, а також видаляються збережені дані форми. Користувача знову перенаправляють на цю ж сторінку.
Окремо обробляється ситуація з оформленням замовлення. Якщо надійшов параметр checkout, кошик та дані форми повністю очищаються, після чого відбувається перенаправлення із GET-параметром checkout_success=1, який потім дозволяє вивести повідомлення про успішне замовлення.
Далі в HTML-частині виводиться головне вміст сторінки. Якщо замовлення було успішно оформлене - з’являється вітальне повідомлення та кнопка для повернення до покупок. Якщо кошик порожній - виводиться відповідне повідомлення та також посилання для повернення до товарів.
У випадку, якщо в кошику є товари, формується таблиця з усіма елементами. Для кожного товару по черзі викликається функція getProductByCode, яка знаходить повну інформацію про товар за його кодом. Обчислюється сума для кожного рядка як добуток ціни на кількість, і ця сума додається до загальної вартості кошика.
У таблиці виводиться назва товару, ціна, кількість, підсумкова вартість та кнопка для видалення товару з кошика. Зображення товару виводиться у вигляді мініатюри поруч із назвою.
Після виведення всіх товарів формується підсумковий рядок з відображенням загальної вартості всіх товарів у кошику. Нижче виводяться дві кнопки - одна для повернення до сторінки товарів, а інша - для очищення кошика або для його оформлення. Для обох дій додаються запобіжні вікна з підтвердженням, щоб уникнути випадкових кліків. На завершення підключається footer.php, який закриває сторінку.

4 ВИСНОВКИ
У результаті виконання лабораторної роботи було реалізовано повний цикл обробки замовлення в PHP CLI-магазині, включаючи додавання товарів до кошика, збереження стану форми та обробку дій користувача. Було використано сесійну пам’ять для збереження вибраних товарів та останніх введених значень. Реалізовано функціонал динамічного відображення товарів і кошика, а також обробку GET-параметрів для видалення, очищення кошика та оформлення замовлення. Кожна дія супроводжується візуальним зворотним зв’язком для користувача. Таким чином, було закріплено навички роботи з формами, сесіями, перенаправленням.


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=uUyBn1Zpzoc 
Хронологічний опис відеозапису:
00:00 - Програмна реалізація index.php, «шапки» сторінки (header.php), «підвалу» сторінки (footer.php)
00:49 -  Програмна реалізація db_config.php
04:23 - Програмна реалізація products.php
07:21 -  Програмна реалізація basket.php
08:41 - Демонстрація функціонування програми

ДОДАТОК Б
Графічні матеріали
  

Рисунок Б.1 - Візуальне зображення реалізації «шапки» сторінки
  

Рисунок Б.2 - Візуальне зображення реалізації «підвалу» сторінки
  

Рисунок Б.3 - Візуальне зображення реалізації сторінки товарів


Рисунок Б.4 - Візуальне зображення реалізації сторінки кошику

ДОДАТОК В
Програмний код
GitHub репозиторій: https://github.com/NureRybalkoIhor/smp-pzpi-23-4-rybalko-ihor/blob/main/Lab3/smp-pzpi-23-4-rybalko-ihor-lab3/smp-pzpi-23-4-rybalko-ihor-lab3-code 
В.1 Програмна реалізація відображення «шапки» сторінки (header.php)
  1 <!DOCTYPE html>
  2 <html>
  3 <head>
  4     <style>
  5         .header {
  6             width: 100%;
  7             border-top: 2px solid #000;
  8             border-bottom: 2px solid #000;
  9             padding: 25px 0;
 10             font-family: Arial, sans-serif;
 11             font-size: 20px;
 12             display: flex;
 13             justify-content: space-between;
 14             align-items: center;
 15         }
 16
 17         .header .left,
 18         .header .center,
 19         .header .right {
 20             flex: 1;
 21         }
 22
 23         .header .center {
 24             text-align: center;
 25         }
 26
 27         .header .right {
 28             text-align: right;
 29         }
 30
 31         .header a {
 32             text-decoration: none;
 33             color: black;
 34             font-weight: bold;
 35             display: inline-flex;
 36             align-items: center;
 37         }
 38
 39         .header img {
 40             width: 30px;
 41             height: 30px;
 42             margin-right: 10px;
 43         }
 44
 45         .header .left a {
 46             margin-left: 30px;
 47         }
 48
 49         .header .right a {
 50             margin-right: 30px;
 51         }
 52     </style>
 53 </head>
 54 <body>
 55     <div class="header">
 56         <div class="left">
 57             <a href="/index.php">
 58                 <img src="/icons/home.png" alt="Home Icon">
 59                 <span>Home</span>
 60             </a>
 61         </div>
 62         <div class="center">
 63             <a href="/pages/products.php">
 64                 <img src="/icons/menu.png" alt="Products Icon">
 65                 <span>Products</span>
 66             </a>
 67         </div>
 68         <div class="right">
 69             <a href="/pages/basket.php">
 70                 <img src="/icons/cart.png" alt="Cart Icon">
 71                 <span>Cart</span>
 72             </a>
 73         </div>
 74     </div>
 75 </body>
 76 </html>


В.2 Програмна реалізація відображення «підвалу» сторінки (footer.php)
  1 <!DOCTYPE html>
  2 <html>
  3 <head>
  4     <style>
  5         .footer {
  6             width: 100%;
  7             border-top: 2px solid #000;
  8             border-bottom: 2px solid #000;
  9             text-align: center;
 10             padding: 25px 0;
 11             font-family: Arial, sans-serif;
 12             font-size: 20px;
 13         }
 14
 15         .footer a {
 16             margin: 0 15px;
 17             text-decoration: none;
 18             color: black;
 19             font-weight: bold;
 20         }
 21
 22         .footer a:hover {
 23             text-decoration: underline;
 24         }
 25     </style>
 26 </head>
 27 <body>
 28     <div class="footer">
 29         <a href="/index.php">Home</a> |
 30         <a href="/pages/products.php">Products</a> |
 31         <a href="/pages/basket.php">Cart</a> |
 32         <a href="#">About us</a>
 33     </div>
 34 </body>
 35 </html>
В.3 Програмна реалізація db_config.php
  1 <?php
  2 session_start();
  3
  4 function getDBConnection() {
  5     try {
  6         $pdo = new PDO('sqlite:' . __DIR__ . '/shop.db');
  7         $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  8         return $pdo;
  9     } catch (PDOException $e) {
 10         die('Помилка підключення до бази даних: ' . $e->getMessage());
 11     }
 12 }
 13
 14 function createProductsTable() {
 15     $pdo = getDBConnection();
 16     $sql = "
 17         CREATE TABLE IF NOT EXISTS products (
 18             id INTEGER PRIMARY KEY AUTOINCREMENT,
 19             code TEXT UNIQUE NOT NULL,
 20             name TEXT NOT NULL,
 21             price REAL NOT NULL,
 22             image TEXT NOT NULL
 23         )
 24     ";
 25     $pdo->exec($sql);
 26 }
 27
 28 function initializeProducts() {
 29     $pdo = getDBConnection();
 30
 31     $stmt = $pdo->query('SELECT COUNT(*) FROM products');
 32     $count = $stmt->fetchColumn();
 33
 34     if ($count == 0) {
 35         $products = [
 36             ['code' => 'milk', 'name' => 'Молоко пастеризоване', 'price' => 12, 'image' => 'milk.png'],
 37             ['code' => 'bread', 'name' => 'Хліб чорний', 'price' => 9, 'image' => 'bread.png'],
 38             ['code' => 'cheese', 'name' => 'Сир білий', 'price' => 21, 'image' => 'cheese.png'],
 39             ['code' => 'sour_cream', 'name' => 'Сметана 20%', 'price' => 25, 'image' => 'whip-cream.png'],
 40             ['code' => 'kefir', 'name' => 'Кефір 1%', 'price' => 19, 'image' => 'kefir.png'],
 41             ['code' => 'water', 'name' => 'Вода газована', 'price' => 18, 'image' => 'sparkling-water.png'],
 42             ['code' => 'cookies', 'name' => 'Печиво \"Весна\"', 'price' => 14, 'image' => 'cookie.png']
 43         ];
 44
 45         $stmt = $pdo->prepare('INSERT INTO products (code, name, price, image) VALUES (?, ?, ?, ?)');
 46         foreach ($products as $product) {
 47             $stmt->execute([$product['code'], $product['name'], $product['price'], $product['image']]);
 48         }
 49     }
 50 }
 51
 52 function getAllProducts() {
 53     $pdo = getDBConnection();
 54     $stmt = $pdo->query('SELECT * FROM products ORDER BY name');
 55     return $stmt->fetchAll(PDO::FETCH_ASSOC);
 56 }
 57
 58 function getProductByCode($code) {
 59     $pdo = getDBConnection();
 60     $stmt = $pdo->prepare('SELECT * FROM products WHERE code = ?');
 61     $stmt->execute([$code]);
 62     return $stmt->fetch(PDO::FETCH_ASSOC);
 63 }
 64
 65 createProductsTable();
 66 initializeProducts();
 67 ?>
В.4 Програмна реалізація products.php
  1 <?php
  2 require_once '../db_config.php';
  3
  4 $errors = [];
  5 $submitted = $_POST ?? [];
  6
  7 $products = getAllProducts();
  8
  9 $currentCart = $_SESSION['cart' ] ?? [];
 10
 11 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
 12     $validItems = [];
 13
 14     foreach ($products as $product) {
 15         $code = $product['code'];
 16         $qty = isset($_POST[$code]) ? (int)$_POST[$code] : 0;
 17         if ($qty < 0) {
 18             $errors[] = "Кількість для {$product['name']} не може бути від'ємною.";
 19         } elseif ($qty > 0) {
 20             $validItems[$code] = $qty;
 21         }
 22     }
 23
 24     if (empty($errors)) {
 25         $_SESSION['cart'] = $validItems;
 26         $_SESSION['last_form_data'] = $_POST;
 27         header('Location: basket.php');
 28         exit;
 29     }
 30 }
 31
 32 $formData = [];
 33 if (!empty($currentCart)) {
 34     $formData = $_SESSION['last_form_data'] ?? $currentCart;
 35 } else {
 36     unset($_SESSION['last_form_data']);
 37 }
 38
 39 $root_path = '../';
 40 include $root_path . 'components/header.php';
 41 ?>
 42
 43 <div style="max-width: 800px; margin: 20px auto; padding: 20px; font-family: Arial, sans-serif;">
 44     <h2>Наші продукти</h2>
 45
 46     <?php if (!empty($errors)): ?>
 47         <div class="error" style="background-color: #ffebee; border: 1px solid #f44336; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
 48             <strong>Перевірте будь ласка введені дані:</strong>
 49             <ul>
 50                 <?php foreach ($errors as $err): ?>
 51                     <li><?= htmlspecialchars($err) ?></li>
 52                 <?php endforeach; ?>
 53             </ul>
 54         </div>
 55     <?php endif; ?>
 56
 57     <form method="POST" action="products.php" style="background-color: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
 58         <table style="width: 100%; border-collapse: collapse;">
 59             <thead>
 60                 <tr style="border-bottom: 2px solid #ddd; background-color: #f2f2f2;">
 61                     <th style="padding: 10px; text-align: center;">№</th>
 62                     <th style="padding: 10px; text-align: left;">НАЗВА</th>
 63                     <th style="padding: 10px; text-align: right;">ЦІНА</th>
 64                     <th style="padding: 10px; text-align: right;">КІЛЬКІСТЬ</th>
 65                 </tr>
 66             </thead>
 67             <tbody>
 68                 <?php $i = 1; foreach ($products as $product): ?>
 69                     <tr style="border-bottom: 1px solid #eee;">
 70                         <td style="padding: 10px; text-align: center;"><?= $i ?></td>
 71                         <td style="padding: 10px;">
 72                             <div style="display: flex; align-items: center;">
 73                                 <div style="width: 50px; height: 50px; margin-right: 10px; background-color: #eee; display: flex; justify-content: center; align-items: center; border-radius: 4px;">
 74                                     <img src="../icons/products/<?= htmlspecialchars($product['image']) ?>" alt="<?= htmlspecialchars($product['name']) ?>" style="max-width: 40px; max-height: 40px;">
 75                                 </div>
 76                                 <span style="font-weight: bold;"><?= htmlspecialchars($product['name']) ?></span>
 77                             </div>
 78                         </td>
 79                         <td style="padding: 10px; text-align: right;"><?= $product['price'] ?> грн</td>
 80                         <td style="padding: 10px; text-align: right;">
 81                             <input type="number" name="<?= htmlspecialchars($product['code']) ?>" min="0" value="<?= isset($formData[$product['code']]) ? (int)$formData[$product['code']] : 0 ?>" style="padding: 8px; width: 60px; border: 1px solid #ddd; border-radius: 4px;">
 82                         </td>
 83                     </tr>
 84                 <?php $i++; endforeach; ?>
 85             </tbody>
 86         </table>
 87         <div style="margin-top: 20px; text-align: right;">
 88             <button type="submit" style="background-color: #4CAF50; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px;">Додати до кошика</button>
 89         </div>
 90     </form>
 91 </div>
 92
 93 <?php
 94 unset($_SESSION['last_form_data']);
 95 include $root_path . 'components/footer.php';
 96 ?>
В.5 Програмна реалізація basket.php
  1 <?php
  2 require_once '../db_config.php';
  3
  4 $cart = $_SESSION['cart'] ?? [];
  5 $total = 0;
  6
  7 $root_path = '../';
  8 include $root_path . 'components/header.php';
  9
 10 if (isset($_GET['remove'])) {
 11     $removeCode = $_GET['remove'];
 12     if (isset($cart[$removeCode])) {
 13         unset($cart[$removeCode]);
 14         $_SESSION['cart'] = $cart;
 15         if (isset($_SESSION['last_form_data'][$removeCode])) {
 16             unset($_SESSION['last_form_data'][$removeCode]);
 17         }
 18         header('Location: basket.php');
 19         exit;
 20     }
 21 }
 22
 23 if (isset($_GET['clear'])) {
 24     $_SESSION['cart'] = [];
 25     unset($_SESSION['last_form_data']);
 26     header('Location: basket.php');
 27     exit;
 28 }
 29
 30 if (isset($_GET['checkout'])) {
 31     $_SESSION['cart'] = [];
 32     unset($_SESSION['last_form_data']);
 33     header('Location: basket.php?checkout_success=1');
 34     exit;
 35 }
 36 ?>
 37
 38 <div style="max-width: 800px; margin: 20px auto; padding: 20px; font-family: Arial, sans-serif;">
 39     <h2>Ваш кошик</h2>
 40
 41     <?php if (isset($_GET['checkout_success'])): ?>
 42         <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 400px; text-align: center;">
 43             <p style="font-size: 24px; color: #333; margin-bottom: 20px;">Ваше замовлення успішно оформлено!</p>
 44             <a href="products.php" style="background-color: #2196F3; color: white; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-size: 18px; display: inline-block;">Перейти до покупок</a>
 45         </div>
 46     <?php elseif (empty($cart)): ?>
 47         <p style="background-color: #f8f8f8; padding: 15px; border-radius: 5px;">Кошик порожній.</p>
 48         <div style="margin-top: 20px;">
 49             <a href="products.php" style="background-color: #2196F3; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; display: inline-block;">Перейти до покупок</a>
 50         </div>
 51     <?php else: ?>
 52         <div style="background-color: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
 53             <table style="width: 100%; border-collapse: collapse;">
 54                 <thead>
 55                     <tr style="background-color: #e0e0e0;">
 56                         <th style="padding: 10px; text-align: left; border-bottom: 1px solid #ddd;">№</th>
 57                         <th style="padding: 10px; text-align: left; border-bottom: 1px solid #ddd;">Назва</th>
 58                         <th style="padding: 10px; text-align: right; border-bottom: 1px solid #ddd;">Ціна</th>
 59                         <th style="padding: 10px; text-align: right; border-bottom: 1px solid #ddd;">Кількість</th>
 60                         <th style="padding: 10px; text-align: right; border-bottom: 1px solid #ddd;">Сума</th>
 61                         <th style="padding: 10px; text-align: center; border-bottom: 1px solid #ddd;">Дія</th>
 62                     </tr>
 63                 </thead>
 64                 <tbody>
 65                     <?php $i = 1; foreach ($cart as $code => $qty): ?>
 66                         <?php
 67                         $product = getProductByCode($code);
 68                         if (!$product) continue;
 69                         $price = $product['price'];
 70                         $itemTotal = $price * $qty;
 71                         $total += $itemTotal;
 72                         ?>
 73                         <tr>
 74                             <td style="padding: 10px; border-bottom: 1px solid #eee;"><?= $i ?></td>
 75                             <td style="padding: 10px; border-bottom: 1px solid #eee;">
 76                                 <div style="display: flex; align-items: center;">
 77                                     <div style="width: 40px; height: 40px; margin-right: 10px; background-color: #eee; display: flex; justify-content: center; align-items: center; border-radius: 4px;">
 78                                         <img src="../icons/products/<?= htmlspecialchars($product['image']) ?>" alt="<?= htmlspecialchars($product['name']) ?>" style="max-width: 30px; max-height: 30px;">
 79                                     </div>
 80                                     <?= htmlspecialchars($product['name']) ?>
 81                                 </div>
 82                             </td>
 83                             <td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee;"><?= $price ?> грн</td>
 84                             <td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee;"><?= $qty ?></td>
 85                             <td style="padding: 10px; text-align: right; border-bottom: 1px solid #eee; color: #4CAF50; font-weight: bold;"><?= $itemTotal ?> грн</td>
 86                             <td style="padding: 10px; text-align: center; border-bottom: 1px solid #eee;">
 87                                 <a href="?remove=<?= urlencode($code) ?>" style="display: inline-block;" onclick="return confirm('Видалити товар з кошика?')">
 88                                     <img src="../icons/delete.png" alt="Видалити" style="width: 20px; height: 20px;">
 89                                 </a>
 90                             </td>
 91                         </tr>
 92                     <?php $i++; endforeach; ?>
 93                 </tbody>
 94                 <tfoot>
 95                     <tr>
 96                         <td colspan="4" style="padding: 10px; text-align: right; font-weight: bold;">Загальна вартість:</td>
 97                         <td style="padding: 10px; text-align: right; color: #4CAF50; font-weight: bold;"><?= $total ?> грн</td>
 98                         <td></td>
 99                     </tr>
100                 </tfoot>
101             </table>
102         </div>
103
104         <div style="margin-top: 20px; display: flex; justify-content: space-between;">
105             <div>
106                 <a href="products.php" style="background-color: #2196F3; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; display: inline-block;">Повернутися до продуктів</a>
107             </div>
108             <div>
109                 <a href="?clear=1" style="background-color: #f44336; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; display: inline-block; margin-right: 10px;" onclick="return confirm('Очистити весь кошик?')">Очистити кошик</a>
110                 <a href="?checkout=1" style="background-color: #4CAF50; color: white; padding: 10px 15px; text-decoration: none; border-radius: 4px; display: inline-block;" onclick="return confirm('Ви впевнені, що хочете оформити замовлення?')">Оформити замовлення</a>
111             </div>
112         </div>
113     <?php endif; ?>
114 </div>
115
116 <?php include $root_path . 'components/footer.php'; ?>
