#!/bin/bash

VERSION="1.0"
INPUT_FILE=""
GROUP=""
QUIET=false

while [[ $# -gt 0 ]]; do
    arg="$1"

    if [[ "$arg" == "--help" ]]; then
        echo "Використання: $0 [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]"
        echo "  --help        Відображення довідки"
        echo "  --version     Відображення версію скрипта"
        echo "  -q, --quiet   Не виводити вміст TimeTable_.._.._20.. та сформованого Google_.._.._20.. файлів у stdout"
        exit 0

    elif [[ "$arg" == "--version" ]]; then
        echo "Версія: $VERSION"
        exit 0

    elif [[ "$arg" == "-q" || "$arg" == "--quiet" ]]; then
        QUIET=true

    elif [[ "$arg" == *.csv ]]; then
        INPUT_FILE="$arg"

    else
        GROUP="$arg"
    fi

    shift
done

if [ -z "$INPUT_FILE" ]; then

    files=($(ls | grep -E '^TimeTable_.._.._20..\.csv'))

    if [ ${#files[@]} -eq 0 ]; then
        echo "Помилка: файли TimeTable_ДД_ММ_РРРР.csv не знайдено" >&2
        exit 1
    fi

    sorted_files=()
    for file in "${files[@]}"; do

        day=${file:10:2}
        month=${file:13:2}
        year=${file:16:4}

        sorted_files+=("${year}${month}${day} $file")
    done

    sorted_files=($(printf "%s\n" "${sorted_files[@]}" | sort | awk '{print $2}'))

    sorted_files+=("Вийти")

    echo "Оберіть файл із розкладом:"
    select chosen_file in "${sorted_files[@]}"; do
        if [ "$chosen_file" = "Вийти" ]; then
            echo "Вихід із програми."
            exit 0
        fi

        if [ -n "$chosen_file" ]; then
            echo "Обрано файл: $chosen_file"
            INPUT_FILE="$chosen_file"
            break
        else
            echo "Помилка: виберіть номер зі списку."
        fi
    done
fi

if [ ! -f "$INPUT_FILE" ]; then
    echo "Помилка: файлу $INPUT_FILE немає у поточній директорії. Передивіться ще раз назву та розширення файлу .csv" >&2
    exit 2
fi

groups=($(cat "$INPUT_FILE" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf-8 | awk '
    BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
    NR > 1 {
        gsub(/^"|"$/, "", $1)
        split($1, words, " ")
        for (i = 1; i <= length(words); i++) {
            if (words[i] ~ /^ПЗПІ-23-[0-9]+$/) {
                print words[i]
            }
        }
    }' | sort | uniq | sort -t '-' -k 3 -n))

if [ ${#groups[@]} -eq 0 ]; then
    echo "Помилка: у файлі $INPUT_FILE не знайдено груп ПЗПІ-23-?" >&2
    exit 3
fi

if [ -n "$GROUP" ] && [ ${#groups[@]} -eq 1 ] && [ "$GROUP" != "${groups[0]}" ]; then
    echo "Цей файл містить лише розклад для групи: ${groups[0]}"
    exit 0
fi

if [ -z "$GROUP" ]; then
    if [ ${#groups[@]} -eq 1 ]; then
        GROUP="${groups[0]}"
        echo "Одна доступна група: $GROUP"
    else
        echo "Доступні групи:"
        groups+=("Повернутись")
        select chosen_group in "${groups[@]}"; do
            if [ "$chosen_group" = "Повернутись" ]; then
                echo "Повернення до вибору файлу."
                exit 0
            elif [ -n "$chosen_group" ]; then
                echo "Обрано групу: $chosen_group"
                GROUP="$chosen_group"
                break
            else
                echo "Помилка: зробіть правильний вибір (номер зі списку)."
            fi
        done
    fi
fi

mode=$(cat "$INPUT_FILE" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf-8 | awk '
    BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
    NR > 1 {
        gsub(/^"|"$/, "", $1)
        split($1, words, " ")
        if (words[0] ~ /^ПЗПІ-23-[0-9]+$/) {
            print "multiGroup"
            exit
        } else if (words[4] ~ /^ПЗПІ-23-[0-9]+$/) {
            print "singleGroup:" words[4]
            exit
        }
    }')

if [[ "$mode" =~ ^singleGroup:(.*) ]]; then
    GROUP="${BASH_REMATCH[1]}"
    MODE="singleGroup"

        if [ "$QUIET" = "false" ]; then
            echo "У файлі знайдено розклад лише для однієї групи: $GROUP"
            echo "Розклад для $GROUP:"

            # Вивести всі рядки, що відповідають одній групі
            cat "$INPUT_FILE" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf-8
        fi

else
    MODE="multiGroup"
    echo "Розклад для групи: $GROUP"
        if [ "$QUIET" = "false" ]; then
            cat "$INPUT_FILE" | sed 's/\r/\n/g' | iconv -f cp1251 -t utf-8 | awk -v group="$GROUP" '
            BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
            NR > 1 {
                gsub(/^"|"$/, "", $1)
                if ($1 ~ (group ", ")) { next }
                split($1, words, /[ ,;]+/)
                    for (i = 1; i <= length(words); i++) {
                        gsub(/^ +| +$/, "", words[i])
                        if (words[i] == group) {
                            print
                            break
                        }
                    }
            }'
        fi
fi


# Формуємо CSV для Google Календаря
output_file=$(echo "$INPUT_FILE" | sed 's/TimeTable/Google_TimeTable/')
echo "Формування розкладу для Google Календаря: $output_file"

tmp_data=$(mktemp)
sorted_data=$(mktemp)

sed 's/\r/\n/g' "$INPUT_FILE" | iconv -f cp1251 -t utf-8 | awk -v GROUP="$GROUP" -v MODE="$MODE" '
BEGIN {
    FS=","; OFS="\t"
}
NR == 1 { next }

function format_sort_key(date, time) {
    split(date, dmy, ".")
    split(time, hm, ":")
    return sprintf("%04d%02d%02d%02d%02d", dmy[3], dmy[2], dmy[1], hm[1], hm[2])
}

function trim_quotes(s) {
    gsub(/^"|"$/, "", s)
    return s
}

{
    line = $0
    match(line, /"[0-3][0-9]\.[0-1][0-9]\.[0-9]{4}"/)
    if (RSTART == 0) { next }

    field1 = substr(line, 1, RSTART - 2)
    rest = substr(line, RSTART)

    n = 0; in_quotes = 0; field = ""
    for (i = 1; i <= length(rest); i++) {
        c = substr(rest, i, 1)
        if (c == "\"") in_quotes = !in_quotes
        else if (c == "," && !in_quotes) {
            fields[++n] = field
            field = ""
        } else {
            field = field c
        }
    }
    fields[++n] = field
    for (i = 1; i <= n; i++) fields[i] = trim_quotes(fields[i])
    if (n < 12) next

if (MODE == "singleGroup") {
    subject = trim_quotes(field1)
}
else {

    match(field1, /(ПЗПІ-[0-9]+-[0-9]+)[[:space:]]*-[[:space:]]*/, m)
    found_group = m[1]

    if (found_group != GROUP)
        next

    field1 = substr(field1, RSTART + RLENGTH)
    gsub(/^[[:space:]]+/, "", field1)
    subject = field1
    gsub(/^"|"$/, "", subject)
}

    desc = fields[11]
    type = "Інше"

    if (desc ~ /Лб/)
        type = "Лб"
    else if (desc ~ /Лк/)
        type = "Лк"
    else if (desc ~ /Пз/)
        type = "Пз"
    else if (desc ~ /Екз/i)
        type = "Екз"

    sort_key = format_sort_key(fields[1], fields[2])

    print subject, type, fields[1], fields[2], fields[3], fields[4], desc, sort_key
}' > "$tmp_data"

sort -t $'\t' -k8,8 "$tmp_data" > "$sorted_data"

awk -F'\t' '
BEGIN {
    OFS = ","
    print "Subject", "Start Date", "Start Time", "End Date", "End Time", "Description"
}

function format_date(date) {
    split(date, dmy, ".")
    return sprintf("%02d/%02d/%04d", dmy[2], dmy[1], dmy[3])
}

function format_time(time) {
    split(time, hmin, ":")
    h = hmin[1] + 0
    min = hmin[2]
    ap = (h >= 12) ? "PM" : "AM"
    if (h == 0) h = 12
    else if (h > 12) h -= 12
    return sprintf("%02d:%s %s", h, min, ap)
}
{
    subj_key = $1 "_" $2
    date_key = $3 "_" $7

    if ($2 == "Лб") {
        if (!(date_key in lab_seen)) {
            count[subj_key]++
            lab_seen[date_key] = count[subj_key]
        }
        number = lab_seen[date_key]
    } else {
        count[subj_key]++
        number = count[subj_key]
    }

    subject_full = $1 "; №" number
    start_date = format_date($3)
    start_time = format_time($4)
    end_date = format_date($5)
    end_time = format_time($6)
    desc = $7

    printf "\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"\n", \
        subject_full, start_date, start_time, end_date, end_time, desc
}' "$sorted_data" > "$output_file"

if [[ "$QUIET" == false ]]; then
    cat "$output_file"
    echo "Google-file сформований"
else
    echo "Google-file сформований"
fi

echo "Назва вихідного файлу: $output_file"

rm -f "$tmp_data" "$sorted_data"
